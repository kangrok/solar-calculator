{"version":3,"sources":["Calculations.js","components/CoordinateForm.js","components/DatePicker.js","components/LocationPicker.js","components/Calculator.js","components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["Calculations","coordinate","charAt","parseFloat","substring","dec","deg","Math","floor","min","sec","round","toString","ms","s","hr","d","latitude","Array","isArray","this","getDeg","longitude","date","isNaN","getTime","latIsValid","lngIsValid","dateIsValid","getTimes","sunrise","sunset","lat","lng","getSunrise","getSunset","abs","formatDayLength","times","Date","getDayLength","setDate","getDate","getPosition","altitude","dayLength","msToHrs","getPolarDayLength","date1","date2","data","Map","set","get","push","x","y","getGraphDayLength","CoordinateForm","props","calc","classes","useStyles","useState","getDegMinSec","coordinateStr","setCoordinateStr","isValid","c","type","handleCoordinateChange","i","event","n","target","value","replace","newCoordinate","setCoordinate","useEffect","style","width","FormHelperText","toUpperCase","className","input","inputs","FormControl","key","error","onChange","endAdornment","InputAdornment","inputProps","textAlign","generateInputs","makeStyles","display","DatePicker","utils","DateFnsUtils","label","format","KeyboardButtonProps","maxWidth","marginBottom","LocationPicker","Number","toFixed","loc","setLoc","locationIsValid","Box","root","Paper","location","map","center","zoom","onClick","handleMapClick","onMouseMove","latlng","TileLayer","url","attribution","Marker","opacity","icon","position","ic","L","Icon","Default","options","shadowSize","height","backgroundColor","gridRow","gridColumn","zIndex","justifySelf","padding","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","Calculator","setSunrise","setSunset","inputLat","inputLng","calculator","form","Button","variant","color","stateIsValid","setLat","setLng","result","Typography","paragraph","toUTCString","getDayLengthString","flexDirection","alignItems","justifyContent","flexWrap","minWidth","margin","marginTop","Graph","startDate","setStartDate","setFullYear","getFullYear","endDate","setEndDate","getChartData","dateData","setDateData","labels","datasets","borderColor","chartData","setChartData","title","text","responsive","maintainAspectRatio","legend","elements","point","radius","scales","xAxes","time","unit","getUnit","length","unitStepSize","getStepSize","displayFormats","day","month","year","yAxes","scaleLabel","labelString","fontWeight","ticks","max","setOptions","newDateData","newChartData","_","clone","newOptions","graph","id","size","TabPanel","children","index","other","hidden","p","App","React","activeTab","setActiveTab","square","Tabs","indicatorColor","textColor","newTab","Tab","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.10bea9e3.chunk.js","sourcesContent":["import {getTimes, getPosition} from \"suncalc\"\r\n\r\nexport default class Calculations {\r\n\r\n    getDeg(coordinate) {\r\n        if (coordinate[0].charAt(0) === \"-\") {\r\n            return -parseFloat(coordinate[0].substring(1)) - parseFloat(coordinate[1]) / 60 - parseFloat(coordinate[2]) / 3600;\r\n        }\r\n        return parseFloat(coordinate[0]) + parseFloat(coordinate[1]) / 60 + parseFloat(coordinate[2]) / 3600;\r\n    };\r\n\r\n    getDegMinSec(dec) {\r\n        let deg = Math.floor(dec),\r\n            min = Math.floor((dec - deg) * 60),\r\n            sec = Math.round((dec - deg - min / 60) * 3600);\r\n        if (sec === 60) {\r\n            min++;\r\n            sec = 0;\r\n        }\r\n        if (min === 60) {\r\n            deg++;\r\n            min = 0;\r\n        }\r\n\r\n        return [deg.toString(), min.toString(), sec.toString()]\r\n    };\r\n\r\n    formatDayLength(ms) {\r\n        const s = ms / 1000;\r\n        let sec = Math.floor(s % 60),\r\n            min = Math.floor((s / 60) % 60),\r\n            hr = Math.floor(s / 60 / 60 % 24),\r\n            d = Math.floor(s / 60 / 60 / 24);\r\n        return (d === 0 ? \"\" : d + \"d \") + hr + \"h \" + min + \"m \" + sec + \"s\";\r\n    };\r\n\r\n    latIsValid(latitude) {\r\n        const deg = Array.isArray(latitude) ? this.getDeg(latitude) : latitude;\r\n        return deg >= -90 && deg <= 90;\r\n    };\r\n\r\n    lngIsValid(longitude) {\r\n        const deg = Array.isArray(longitude) ? this.getDeg(longitude) : longitude;\r\n        return deg >= -180 && deg <= 180;\r\n    };\r\n\r\n    dateIsValid(date) {\r\n        return date !== null && !isNaN(date.getTime());\r\n    }\r\n\r\n    stateIsValid(latitude, longitude, date) {\r\n        return this.latIsValid(latitude) && this.lngIsValid(longitude) && this.dateIsValid(date);\r\n    }\r\n\r\n    getSunrise(latitude, longitude, date) {\r\n        return getTimes(date, latitude, longitude,).sunrise;\r\n    }\r\n\r\n    getSunset(latitude, longitude, date) {\r\n        return getTimes(date, latitude, longitude).sunset;\r\n    }\r\n\r\n    getDayLength(lat, lng, date) {\r\n        const sunrise = this.getSunrise(lat, lng, date);\r\n        const sunset = this.getSunset(lat, lng, date);\r\n        return Math.abs(sunset - sunrise);\r\n    }\r\n\r\n    getDayLengthString(sunrise, sunset) {\r\n        return this.formatDayLength(Math.abs(sunset-sunrise));\r\n    }\r\n\r\n    msToHrs(ms) {\r\n        return (ms / 1000 / 60 / 60) % 24;\r\n    }\r\n\r\n    getPolarDayLength(lat, lng, date) {\r\n        const times = getTimes(date, lat, lng);\r\n        const d = new Date(date);\r\n\r\n        // Currently classify edge cases as either polar day or polar night.\r\n        // If there is a sunrise and next day is a polar event, then this is the start of a polar day.\r\n        // Otherwise if there is a sunrise and next day is not a polar event, then it is the end of a polar night.\r\n        if (times.sunrise.toString() !== \"Invalid Date\") {\r\n            if (isNaN(this.getDayLength(lat, lng, new Date(d.setDate(d.getDate() + 1))))) {\r\n                return 24;\r\n            }\r\n            return 0;\r\n        } else if (times.sunset.toString() !== \"Invalid Date\") {\r\n            if (isNaN(this.getDayLength(lat, lng, new Date(d.setDate(d.getDate() + 1))))) {\r\n                return 0\r\n            }\r\n            return 24;\r\n        }\r\n        return getPosition(d, lat, lng).altitude >= 0 ? 24 : 0;\r\n    }\r\n\r\n    getGraphDayLength(lat, lng, date) {\r\n        let dayLength = this.msToHrs(this.getDayLength(lat, lng, date));\r\n        if (isNaN(dayLength)) {\r\n            dayLength = this.getPolarDayLength(lat, lng, date);\r\n        }\r\n        return dayLength;\r\n    }\r\n\r\n    getChartData(date1, date2, lat, lng) {\r\n        let data = new Map();\r\n        data.set(\"labels\", []);\r\n        data.set(\"data\", []);\r\n        let d = new Date(date1);\r\n        while (d <= date2) {\r\n            data.get(\"labels\").push(new Date(d));\r\n            data.get(\"data\").push({\r\n                x: new Date(d),\r\n                y: this.getGraphDayLength(lat, lng, d),\r\n            });\r\n            d = new Date(d.setDate(d.getDate() + 1));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Input from \"@material-ui/core/Input/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Calculations from \"../Calculations\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\n\r\nexport default function CoordinateForm(props) {\r\n    const calc = new Calculations();\r\n    const classes = useStyles();\r\n\r\n    const [coordinateStr, setCoordinateStr] = useState(calc.getDegMinSec(props.coordinate));\r\n\r\n    const isValid = (c) => {\r\n        const notEmpty = c[0] !== \"\" && c[1] !== \"\" && c[2] !== \"\";\r\n        return notEmpty && props.type === \"latitude\" ? calc.latIsValid(c) : calc.lngIsValid(c);\r\n    };\r\n\r\n    const handleCoordinateChange = (i) => (event) => {\r\n        const n = event.target.value.replace(i > 0 ? /[^0-9]/g : /[^0-9-]/g, '');\r\n        let newCoordinate = [...coordinateStr];\r\n        newCoordinate[i] = n;\r\n        setCoordinateStr(newCoordinate);\r\n        props.setCoordinate(calc.getDeg(newCoordinate));\r\n    };\r\n\r\n    // Update fields if location is selected on map.\r\n    useEffect(() => {\r\n        let newCoordinate = calc.getDegMinSec(props.coordinate);\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            if (newCoordinate[i] !== coordinateStr[i]) {\r\n                setCoordinateStr(newCoordinate);\r\n                break;\r\n            }\r\n        }\r\n    }, [props.coordinate]);\r\n\r\n    const generateInputs = () => {\r\n        let inputs = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            inputs.push(\r\n                <FormControl key={i} error={!isValid(coordinateStr)}>\r\n                    <Input value={coordinateStr[i]}\r\n                           onChange={handleCoordinateChange(i)}\r\n                           endAdornment={<InputAdornment>{i === 0 ? \"°\" : i === 1 ? \"'\" : \"''\"}</InputAdornment>}\r\n                           inputProps={{style: {textAlign: 'right'}}}\r\n                    />\r\n                </FormControl>\r\n            )\r\n        }\r\n        return inputs\r\n    };\r\n\r\n    return (\r\n        <div style={{width: '270px'}}>\r\n            <FormHelperText>{props.type.charAt(0).toUpperCase() + props.type.substring(1)}</FormHelperText>\r\n            <div className={classes.input}>\r\n                {generateInputs()}\r\n            </div>\r\n            <FormHelperText error>\r\n                {isValid(coordinateStr)\r\n                    ? \" \"\r\n                    : (props.type === \"latitude\"\r\n                        ? \"Latitude must be between -90° and 90°.\"\r\n                        : \"Longitude must be between -180° and 180°.\")}\r\n            </FormHelperText>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    input: {\r\n        '& > *': {\r\n            width: '40px',\r\n        },\r\n        display: 'flex',\r\n    },\r\n}));","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nexport default function DatePicker(props) {\r\n    const classes = useStyles();\r\n\r\n    const handleDateChange = (date) => {\r\n        props.setDate(date);\r\n    };\r\n\r\n    return (\r\n        // From Material-UI documentation.\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n                className={classes.date}\r\n                label={props.label}\r\n                format=\"MM/dd/yyyy\"\r\n                value={props.date}\r\n                onChange={handleDateChange}\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                }}\r\n            />\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    date: {\r\n        '& > *': {\r\n            maxWidth: '180px',\r\n        },\r\n        marginBottom: '2vh',\r\n    },\r\n}));","import React, {useState} from \"react\";\r\nimport {Map, Marker, TileLayer} from \"react-leaflet\";\r\nimport L from \"leaflet\"\r\nimport Calculations from \"../Calculations\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nexport default function LocationPicker(props) {\r\n    const calc = new Calculations();\r\n    const classes = useStyles();\r\n\r\n    const [loc, setLoc] = useState([Number(0).toFixed(4), Number(0).toFixed(4)]);\r\n\r\n    const locationIsValid = () => {\r\n        return calc.latIsValid(props.lat) && calc.lngIsValid(props.lng);\r\n    };\r\n\r\n    const trackLocation = (event) => {\r\n        setLoc([Number(event.latlng.lat).toFixed(4), Number(event.latlng.lng).toFixed(4)]);\r\n    };\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <Paper className={classes.location}>{\"Latitude: \" + loc[0]} &ensp; {\"Longitude: \" + loc[1]}</Paper>\r\n            <Box className={classes.map}>\r\n                <Map center={[30, 0]} zoom={1.5} onClick={props.handleMapClick} onMouseMove={trackLocation}>\r\n                    <TileLayer\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    />\r\n                    <Marker\r\n                        opacity={locationIsValid() ? 100 : 0}\r\n                        icon={icon()}\r\n                        position={locationIsValid() ? [props.lat, props.lng] : [0, 0]}\r\n                    />\r\n                </Map>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst icon = () => {\r\n    let ic = new L.Icon.Default();\r\n    ic.options.shadowSize = [0, 0];\r\n    return ic;\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: \"grid\",\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    location: {\r\n        backgroundColor: \"white\",\r\n        gridRow: \"1\",\r\n        gridColumn: \"1\",\r\n        zIndex: \"2\",\r\n        position: \"relative\",\r\n        justifySelf: \"right\",\r\n        width: \"300px\",\r\n        height: \"25px\",\r\n        opacity: \"0.7\",\r\n        padding: \"0 5px 0 5px\",\r\n\r\n    },\r\n    map: {\r\n        gridRowStart: \"1\",\r\n        gridRowEnd: \"2\",\r\n        gridColumnStart: \"1\",\r\n        gridColumnEnd: \"2\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        zIndex: \"0\",\r\n        position: \"relative\",\r\n    }\r\n}));","import React, {useState} from \"react\";\r\nimport {Paper} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CoordinateForm from \"./CoordinateForm\";\r\nimport Calculations from \"../Calculations\"\r\nimport DatePicker from \"./DatePicker\";\r\nimport LocationPicker from \"./LocationPicker\";\r\n\r\nexport default function Calculator(props) {\r\n    const classes = useStyles();\r\n    const calc = new Calculations();\r\n\r\n    const [date, setDate] = useState(new Date());\r\n    const [sunrise, setSunrise] = useState(calc.getSunrise(props.lat, props.lng, new Date()));\r\n    const [sunset, setSunset] = useState(calc.getSunset(props.lat, props.lng, new Date()));\r\n    let inputLat = props.lat;\r\n    let inputLng = props.lng;\r\n\r\n    const setInputLat = (lat) => {\r\n        inputLat = lat;\r\n    };\r\n\r\n    const setInputLng = (lng) => {\r\n        inputLng = lng;\r\n    };\r\n\r\n    const handleMapClick = (event) => {\r\n        props.setLat(event.latlng.lat);\r\n        props.setLng(event.latlng.lng);\r\n    };\r\n\r\n    const setSolarEvents = () => {\r\n        if (calc.stateIsValid(inputLat, inputLng, date)) {\r\n            props.setLat(inputLat);\r\n            props.setLng(inputLng);\r\n            setSunrise(calc.getSunrise(inputLat, inputLng, date));\r\n            setSunset(calc.getSunset(inputLat, inputLng, date));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.calculator}>\r\n                <div className={classes.form}>\r\n                    <CoordinateForm\r\n                        type=\"latitude\"\r\n                        coordinate={props.lat}\r\n                        setCoordinate={setInputLat}\r\n                        isValid={calc.latIsValid}\r\n                    />\r\n                    <CoordinateForm\r\n                        type=\"longitude\"\r\n                        coordinate={props.lng}\r\n                        setCoordinate={setInputLng}\r\n                        isValid={calc.lngIsValid}\r\n                    />\r\n                    <DatePicker date={date} label=\"Date\" setDate={setDate}/>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={setSolarEvents} style={{width: \"150px\"}}>\r\n                        Calculate\r\n                    </Button>\r\n                </div>\r\n                <div className={classes.result}>\r\n                    <Typography variant=\"h5\" paragraph={true}>Sunrise: {sunrise.toUTCString()}</Typography>\r\n                    <Typography variant=\"h5\" paragraph={true}>Sunset: {sunset.toUTCString()}</Typography>\r\n                    <Typography variant=\"h5\">Length of day: {calc.getDayLengthString(sunrise, sunset)}</Typography>\r\n                </div>\r\n            </Paper>\r\n            <Paper className={classes.map}>\r\n                <LocationPicker lat={props.lat} lng={props.lng} handleMapClick={handleMapClick}/>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    calculator: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        padding: '3ch 5ch 3ch 5ch',\r\n        width: '40vw'\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minWidth: '220px'\r\n    },\r\n    date: {\r\n        '& > *': {\r\n            maxWidth: '180px',\r\n        },\r\n        marginBottom: '2vh',\r\n    },\r\n    result: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-between\",\r\n        margin: \"2vh 0 2vh 0\",\r\n        width: \"25vw\",\r\n    },\r\n    map: {\r\n        width: '55vw',\r\n        height: '55vh',\r\n        marginTop: '3vh',\r\n    },\r\n}));","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Box, Paper} from \"@material-ui/core\";\r\nimport Calculations from \"../Calculations\";\r\nimport {Line} from \"react-chartjs-2\"\r\nimport LocationPicker from \"./LocationPicker\";\r\nimport CoordinateForm from \"./CoordinateForm\";\r\nimport DatePicker from \"./DatePicker\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport _ from \"lodash\";\r\n\r\nexport default function Graph(props) {\r\n    const classes = useStyles();\r\n    const calc = new Calculations();\r\n    let date = new Date();\r\n\r\n    const [startDate, setStartDate] = useState(new Date(date));\r\n    const [endDate, setEndDate] = useState(new Date(date.setFullYear(date.getFullYear() + 1)));\r\n    const [dateData, setDateData] = useState(calc.getChartData(startDate, endDate, props.lat, props.lng));\r\n    const [chartData, setChartData] = useState({\r\n        labels: dateData.get(\"labels\"),\r\n        datasets: [{\r\n            borderColor: \"rgba(17, 82, 147, 1)\",\r\n            backgroundColor: \"rgba(17, 82, 147, 0.5)\",\r\n            data: dateData.get(\"data\"),\r\n        }],\r\n    });\r\n    const [options, setOptions] = useState({\r\n        title: {text: \"Length of day per date\", display: true},\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        legend: {display: false},\r\n        elements: {\r\n            point: {\r\n                radius: 0\r\n            }\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                type: 'time',\r\n                time: {\r\n                    unit: getUnit(dateData.get(\"labels\").length),\r\n                    unitStepSize: getStepSize(dateData.get(\"labels\").length),\r\n                    displayFormats: {\r\n                        day: 'MMM DD',\r\n                        month: 'MMM',\r\n                        year: 'YYYY',\r\n                    }\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n                    labelString: 'Day length (hrs)',\r\n                    fontWeight: \"bold\",\r\n                },\r\n                ticks: {\r\n                    min: 0,\r\n                    max: 24\r\n                }\r\n            }]\r\n        }\r\n    });\r\n    let inputLat = props.lat;\r\n    let inputLng = props.lng;\r\n\r\n    const setInputLat = (lat) => {\r\n        inputLat = lat;\r\n    };\r\n\r\n    const setInputLng = (lng) => {\r\n        inputLng = lng;\r\n    };\r\n\r\n    const handleDataChange = () => {\r\n        if (calc.stateIsValid(inputLat, inputLng, startDate) && calc.dateIsValid(endDate)) {\r\n            props.setLat(inputLat);\r\n            props.setLng(inputLng);\r\n\r\n            const newDateData = calc.getChartData(startDate, endDate, inputLat, inputLng);\r\n            setDateData(newDateData);\r\n\r\n            let newChartData = _.clone(chartData);\r\n            newChartData.labels = newDateData.get(\"labels\");\r\n            newChartData.datasets[0].data = newDateData.get(\"data\");\r\n            setChartData(newChartData);\r\n\r\n            let newOptions = _.clone(options);\r\n            newOptions.scales.xAxes[0].time.unit = getUnit(newDateData.get(\"labels\").length);\r\n            newOptions.scales.xAxes[0].time.unitStepSize = getStepSize(newDateData.get(\"labels\").length);\r\n            setOptions(newOptions);\r\n        }\r\n    };\r\n\r\n    const handleMapClick = (event) => {\r\n        props.setLat(event.latlng.lat);\r\n        props.setLng(event.latlng.lng);\r\n    };\r\n\r\n    return (\r\n        <Box style={{display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\r\n            <Paper style={{display: \"flex\", flexDirection: \"row\", padding: 0, height: \"40vh\",}}>\r\n                <div className={classes.form}>\r\n                    <CoordinateForm\r\n                        type=\"latitude\"\r\n                        coordinate={inputLat}\r\n                        setCoordinate={setInputLat}\r\n                        isValid={calc.latIsValid}/>\r\n                    <CoordinateForm\r\n                        type=\"longitude\"\r\n                        coordinate={inputLng}\r\n                        setCoordinate={setInputLng}\r\n                        isValid={calc.lngIsValid}\r\n                    />\r\n                    <DatePicker date={startDate} label=\"Start date\" setDate={setStartDate}/>\r\n                    <DatePicker date={endDate} label=\"End date\" setDate={setEndDate}/>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleDataChange} style={{width: \"150px\"}}>\r\n                        Update chart\r\n                    </Button>\r\n                </div>\r\n                <Box style={{width: \"45vw\", height: \"40vh\", margin: 0}}>\r\n                    <LocationPicker\r\n                        lat={props.lat} lng={props.lng}\r\n                        handleMapClick={handleMapClick}\r\n                    />\r\n                </Box>\r\n            </Paper>\r\n            <Paper className={classes.graph}>\r\n                <Line id=\"chart\" options={options} data={chartData}/>\r\n            </Paper>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst getUnit = (size) => {\r\n    return size > 750 ? \"year\" : (size > 90 ? \"month\" : \"day\");\r\n};\r\n\r\nconst getStepSize = (size) => {\r\n    const unit = getUnit(size);\r\n    if (unit === \"day\") return size > 60 ? 6 : (size > 30 ? 3 : 1);\r\n    const coef = unit === \"month\" ? 30 : 365;\r\n    return size <= 15 * coef ? 1 : 0;\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: \"space-around\",\r\n        alignItems: 'center',\r\n        padding: '3ch 5ch 3ch 5ch',\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minWidth: '220px',\r\n        padding: \"4ch\",\r\n    },\r\n    graph: {\r\n        marginTop: \"3ch\",\r\n        padding: \"3ch\",\r\n        height: \"40vh\",\r\n        width: \"80%\",\r\n    },\r\n}));","import React, {useState} from 'react';\nimport Box from \"@material-ui/core/Box\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Calculator from \"./components/Calculator\";\nimport Graph from \"./components/Graph\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\n\nfunction App() {\n\n    const [lat, setLat] = useState(0.0);\n    const [lng, setLng] = useState(0.0);\n    const [activeTab, setActiveTab] = React.useState(0);\n\n    const handleTabChange = (event, newTab) => {\n        setActiveTab(newTab);\n    };\n\n    return (\n        <div>\n            <Paper square>\n                <Tabs value={activeTab} indicatorColor=\"primary\" textColor=\"primary\" onChange={handleTabChange}>\n                    <Tab label=\"Calculator\"/>\n                    <Tab label=\"Graph\"/>\n                </Tabs>\n            </Paper>\n            <TabPanel value={activeTab} index={0}>\n                <Calculator lat={lat} lng={lng} setLat={setLat} setLng={setLng}/>\n            </TabPanel>\n            <TabPanel value={activeTab} index={1}>\n                <Graph lat={lat} lng={lng} setLat={setLat} setLng={setLng}/>\n            </TabPanel>\n        </div>\n    );\n}\n\n// From Material-UI documentation.\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n    const classes = useStyles();\n\n    return (\n        <div hidden={value !== index} className={classes.root}\n             {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center'\n    },\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}